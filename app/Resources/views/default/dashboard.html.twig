{% extends 'base.html.twig' %}

{% block body %}
    <div class="col-xs-12  col-sm-4 text-center">
        <div class="row roulette-container clearfix">
            <canvas id="canvas" width="500" height="500"></canvas>
            <img id="roulette" src="{{ asset('img/new-roulette.png') }}" data-src="{{ asset('img/gif/roulette.gif') }}" class="roulette" alt="Ruleta">
        </div>

        <div class="row">
            <img id='startStopRouletteBtn' data-static='true' data-loader='/img/gif/loader.gif' src='/img/btn-play.png' class='btn-play' alt='Jugar' width='200'>
            <div id="rouletteBtnContainer" class="col-xs-12 text-center">
            </div>
            <div id="timeLeftContainer" class="col-xs-12 time-left hide">
                <p>
                    En <span id="timeLeft">23:59</span> hora(s) tendrás 3 oportunidades para ganar
                </p>
            </div>
        </div>
    </div>

    <div class="col-xs-12 col-sm-4 col-sm-offset-2 text-center question-container">
        {% if isFirstUser %}
            <img src="{{ asset('img/first.png') }}" alt="Primer lugar" width="100">
        {% endif %}

        <div id="questionTitle" class="row">
            <p>
                {% if answeredQuestions > 2 %}
                    Ya respondiste las 3 preguntas de hoy.
                {% else %}
                    ¡Comienza a jugar ahora!
                {% endif %}
            </p>
        </div>

        <div id="questionAnswers" class="row"></div>

        <div class="row field-container">
            <img id="field" src="{{ asset('img/field.png') }}" class="field" alt="Campo">
        </div>

        {% if canInvite %}
            <div id="shareContainer" class="row share-container">
                <div data-toggle="modal" data-target="#inviteModal" class="col-xs-5 col-sm-4 col-xs-offset-4 text-center">
                    <img src="{{ asset('img/btn-invite.png') }}" alt="Invitar Amigos" width="100%">
                </div>
            </div>
        {% endif %}
    </div>
{% endblock %}

{% block javascripts %}
    <script>
        // This vector contains the options for each "side" of roulette
        let options = ["", "", "", "", "", "", "", ""],
            startAngle = 0,
            arc = Math.PI / (options.length / 2),
            spinTimeout = null,
            spinAngleStart,
            spinTime = 0,
            spinTimeTotal = 0,
            ctx,
            red,
            green,
            blue;

        // document.getElementById("startStopRouletteBtn").addEventListener("click", spin);
        document.addEventListener("click", function(e) {
            if (e.target && e.target.id == "startStopRouletteBtn") {
                spin();
            }
        })

        function byte2Hex(n) {
            let nybHexString = "0123456789ABCDEF";
            return String(nybHexString.substr((n >> 4) & 0x0F,1)) + nybHexString.substr(n & 0x0F,1);
        }

        function RGB2Color(r,g,b) {
            return "#" + byte2Hex(r) + byte2Hex(g) + byte2Hex(b);
        }

        function getColor(item, maxitem) {
            let phase = 0,
                center = 128,
                width = 127,
                frequency = Math.PI*2/maxitem;

            red   = Math.sin(frequency*item+2+phase) * width + center;
            green = Math.sin(frequency*item+0+phase) * width + center;
            blue  = Math.sin(frequency*item+4+phase) * width + center;

            return RGB2Color(red,green,blue);
        }

        function drawRouletteWheel() {
            let canvas = document.getElementById("canvas");
            if (canvas.getContext) {
                let outsideRadius = 160,
                    textRadius = 110,
                    insideRadius = 0;

                ctx = canvas.getContext("2d");
                ctx.clearRect(0,0,500,500);

                ctx.strokeStyle = "black";
                ctx.lineWidth = 2;

                ctx.font = "bold 12px Helvetica, Arial";

                for(let i = 0; i < options.length; i++) {
                    let angle = startAngle + i * arc;

                    ctx.fillStyle = getColor(i, options.length);

                    ctx.beginPath();
                    ctx.arc(250, 250, outsideRadius, angle, angle + arc, false);
                    ctx.arc(250, 250, insideRadius, angle + arc, angle, true);
                    ctx.stroke();
                    ctx.fill();

                    ctx.save();
                    ctx.shadowOffsetX = -1;
                    ctx.shadowOffsetY = -1;
                    ctx.shadowBlur    = 0;
                    ctx.shadowColor   = "rgb(220,220,220)";
                    ctx.fillStyle = "black";
                    ctx.translate(250 + Math.cos(angle + arc / 2) * textRadius,
                        250 + Math.sin(angle + arc / 2) * textRadius);
                    ctx.rotate(angle + arc / 2 + Math.PI / 2);
                    let text = options[i];
                    ctx.fillText(text, -ctx.measureText(text).width / 2, 0);
                    ctx.restore();
                }

                //Arrow
                ctx.fillStyle = "black";
                ctx.beginPath();
                ctx.moveTo(250 - 4, 250 - (outsideRadius + 5));
                ctx.lineTo(250 + 4, 250 - (outsideRadius + 5));
                ctx.lineTo(250 + 4, 250 - (outsideRadius - 5));
                ctx.lineTo(250 + 9, 250 - (outsideRadius - 5));
                ctx.lineTo(250 + 0, 250 - (outsideRadius - 13));
                ctx.lineTo(250 - 9, 250 - (outsideRadius - 5));
                ctx.lineTo(250 - 4, 250 - (outsideRadius - 5));
                ctx.lineTo(250 - 4, 250 - (outsideRadius + 5));
                ctx.fill();
            }
        }

        function spin() {
            spinAngleStart = Math.random() * 10 + 10;
            spinTime = 0;
            spinTimeTotal = Math.random() * 3 + 4 * 1000;
            rotateWheel();
        }

        function rotateWheel() {
            spinTime += 30;
            if(spinTime >= spinTimeTotal) {
                stopRotateWheel();
                return;
            }
            let spinAngle = spinAngleStart - easeOut(spinTime, 0, spinAngleStart, spinTimeTotal);
            startAngle += (spinAngle * Math.PI / 180);
            drawRouletteWheel();
            spinTimeout = setTimeout("rotateWheel()", 30);
        }

        function stopRotateWheel() {
            clearTimeout(spinTimeout);
            let degrees = startAngle * 180 / Math.PI + 90,
                arcd = arc * 180 / Math.PI,
                index = Math.floor((360 - degrees % 360) / arcd);

            ctx.save();
            ctx.font = "bold 30px Helvetica, Arial";
            let text = options[index];
            ctx.fillText(text, 250 - ctx.measureText(text).width / 2, 250 + 10);
            ctx.restore();

            console.log("end!");
            startRoulette();
        }

        function easeOut(t, b, c, d) {
            let ts = (t/=d)*t,
                tc = ts*t;

            return b+c*(tc + -3*ts + 3*t);
        }

        drawRouletteWheel();
    </script>
{% endblock %}
